<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Import Produits en Masse</title>
  <style>
    :root {
      --primary: #3498db;
      --secondary: #2c3e50;
      --success: #27ae60;
      --warning: #f39c12;
      --danger: #e74c3c;
      --light: #ecf0f1;
      --dark: #34495e;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #f8f9fa;
      color: var(--dark);
      line-height: 1.6;
      padding: 20px;
    }

    .container {
      max-width: 1000px;
      margin: 0 auto;
      background: white;
      border-radius: 12px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
      overflow: hidden;
    }

    .header {
      background: var(--secondary);
      color: white;
      padding: 30px;
      text-align: center;
    }

    .header h1 {
      font-size: 2.2rem;
      margin-bottom: 10px;
    }

    .header p {
      opacity: 0.9;
      font-size: 1.1rem;
    }

    .content {
      padding: 30px;
    }

    .produit-row {
      background: var(--light);
      padding: 25px;
      border-radius: 12px;
      margin-bottom: 25px;
      border: 2px solid #ddd;
    }

    .produit-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 2px solid #ccc;
    }

    .produit-number {
      font-weight: bold;
      color: var(--primary);
      font-size: 1.3rem;
    }

    .btn-remove {
      background: var(--danger);
      color: white;
      border: none;
      padding: 8px 16px;
      border-radius: 6px;
      cursor: pointer;
      font-weight: bold;
    }

    .grid-2 {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
      margin-bottom: 20px;
    }

    .grid-3 {
      display: grid;
      grid-template-columns: 1fr 1fr 1fr;
      gap: 15px;
      margin-bottom: 20px;
    }

    .grid-4 {
      display: grid;
      grid-template-columns: 1fr 1fr 1fr 1fr;
      gap: 15px;
      margin-bottom: 20px;
    }

    .form-group {
      margin-bottom: 20px;
    }

    .form-group label {
      display: block;
      margin-bottom: 8px;
      font-weight: 600;
      color: var(--secondary);
    }

    .form-control {
      width: 100%;
      padding: 12px;
      border: 2px solid var(--light);
      border-radius: 8px;
      font-size: 1rem;
      transition: border-color 0.3s ease;
    }

    .form-control:focus {
      outline: none;
      border-color: var(--primary);
    }

    /* Section Photos */
    .photos-section {
      margin: 25px 0;
    }

    .photos-section h4 {
      margin-bottom: 15px;
      color: var(--secondary);
      font-size: 1.1rem;
    }

    .photos-upload {
      display: flex;
      gap: 15px;
      align-items: start;
      margin-bottom: 20px;
    }

    .upload-btn {
      background: var(--primary);
      color: white;
      border: none;
      padding: 12px 20px;
      border-radius: 8px;
      cursor: pointer;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .upload-btn:hover {
      background: #2980b9;
    }

    .photos-preview {
      display: flex;
      gap: 15px;
      flex-wrap: wrap;
      min-height: 120px;
      padding: 15px;
      background: white;
      border-radius: 8px;
      border: 2px dashed #ccc;
    }

    .photo-item {
      position: relative;
      width: 100px;
      height: 100px;
    }

    .photo-preview {
      width: 100%;
      height: 100%;
      object-fit: cover;
      border-radius: 8px;
      border: 2px solid var(--primary);
    }

    .photo-remove {
      position: absolute;
      top: -8px;
      right: -8px;
      background: var(--danger);
      color: white;
      border: none;
      border-radius: 50%;
      width: 24px;
      height: 24px;
      cursor: pointer;
      font-size: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    /* Section Vid√©o */
    .video-section {
      margin: 25px 0;
    }

    .video-section h4 {
      margin-bottom: 15px;
      color: var(--secondary);
      font-size: 1.1rem;
    }

    .video-upload {
      display: flex;
      gap: 15px;
      align-items: center;
    }

    .video-preview {
      width: 200px;
      height: 120px;
      border-radius: 8px;
      border: 2px solid var(--primary);
      display: none;
    }

    /* Boutons */
    .btn {
      padding: 12px 24px;
      border: none;
      border-radius: 8px;
      font-size: 1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 8px;
    }

    .btn-primary {
      background: var(--primary);
      color: white;
    }

    .btn-primary:hover {
      background: #2980b9;
    }

    .btn-outline {
      background: transparent;
      border: 2px solid var(--primary);
      color: var(--primary);
    }

    .btn-outline:hover {
      background: var(--primary);
      color: white;
    }

    .actions {
      display: flex;
      gap: 15px;
      margin-top: 30px;
      flex-wrap: wrap;
    }

    .produit-count {
      background: var(--primary);
      color: white;
      padding: 8px 16px;
      border-radius: 20px;
      font-size: 1rem;
      margin-left: 10px;
    }

    .message {
      padding: 15px;
      border-radius: 8px;
      margin-bottom: 20px;
    }

    .message.success {
      background: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }

    .message.error {
      background: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }

    .message.warning {
      background: #fff3cd;
      color: #856404;
      border: 1px solid #ffeaa7;
    }

    .file-input {
      display: none;
    }

    .prix-ttc {
      font-size: 0.9em;
      color: var(--dark);
      margin-top: 5px;
      font-style: italic;
    }

    .photo-inputs-container {
      margin-bottom: 15px;
    }

    .file-input-single {
      margin-bottom: 10px;
    }

    .btn-small {
      padding: 8px 16px;
      font-size: 0.9rem;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>üì¶ Import de Produits en Masse</h1>
      <p>Ajoutez jusqu'√† 10 produits simultan√©ment</p>
    </div>

    <div class="content">
      <!-- Messages -->
      <div id="messages"></div>

      <div class="actions">
        <button class="btn btn-outline" onclick="addProduct()">
          ‚ûï Ajouter un produit
        </button>
        <span class="produit-count" id="product-count">0 produit(s)</span>
      </div>

      <form id="import-form" enctype="multipart/form-data">
        <div id="products-container">
          <!-- Les produits seront ajout√©s ici dynamiquement -->
        </div>

        <div class="actions">
          <button type="button" class="btn btn-primary" onclick="submitImport()">
            üöÄ Importer tous les produits
          </button>
          <a href="/produits/mes" class="btn btn-outline">
            ‚Üê Retour aux produits
          </a>
        </div>
      </form>
    </div>
  </div>

  <script>
    let productCount = 0;
    const maxProducts = 10;

    // Initialisation
    document.addEventListener('DOMContentLoaded', function() {
      addProduct(); // Ajouter le premier produit
    });

    function addProduct() {
      if (productCount >= maxProducts) {
        showMessage('Maximum ' + maxProducts + ' produits autoris√©s', 'warning');
        return;
      }

      productCount++;
      updateProductCount();

      const productHTML = `
        <div class="produit-row" id="product-${productCount}">
          <div class="produit-header">
            <span class="produit-number">Produit #${productCount}</span>
            <button type="button" class="btn-remove" onclick="removeProduct(${productCount})">
              ‚úï Supprimer
            </button>
          </div>
          
          <!-- Informations de base -->
          <div class="grid-2">
            <div class="form-group">
              <label>Nom du produit *</label>
              <input type="text" name="nom-${productCount}" class="form-control" placeholder="Ex: iPhone 13 Pro" required>
            </div>
            <div class="form-group">
              <label>Description du produit</label>
              <textarea name="description-${productCount}" class="form-control" rows="2" placeholder="D√©crivez votre produit..."></textarea>
            </div>
          </div>
          
          <div class="grid-4">
            <div class="form-group">
              <label>Prix *</label>
              <input type="number" name="prix-${productCount}" step="0.01" class="form-control" placeholder="Ex: 999.99" required 
                     oninput="calculerPrixTTC(this, ${productCount})">
              <div class="prix-ttc" id="prix-ttc-${productCount}"></div>
            </div>
            <div class="form-group">
              <label>Devise *</label>
              <select name="devise-${productCount}" class="form-control" required onchange="calculerPrixTTC(document.querySelector('[name=\"prix-${productCount}\"]'), ${productCount})">
                <option value="EUR">‚Ç¨ Euro</option>
                <option value="USD">$ Dollar US</option>
                <option value="XOF">CFA Franc</option>
                <option value="GBP">¬£ Livre Sterling</option>
                <option value="JPY">¬• Yen Japonais</option>
                <option value="CAD">$ Dollar Canadien</option>
                <option value="CHF">CHF Franc Suisse</option>
                <option value="CNY">¬• Yuan Chinois</option>
              </select>
            </div>
            <div class="form-group">
              <label>Cat√©gorie</label>
              <input type="text" name="categorie-${productCount}" class="form-control" placeholder="Ex: √âlectronique">
            </div>
            <div class="form-group">
              <label>Stock disponible</label>
              <input type="number" name="stock-${productCount}" class="form-control" value="1" min="0">
            </div>
          </div>

          <div class="form-group">
            <label>R√©f√©rence (SKU)</label>
            <input type="text" name="sku-${productCount}" class="form-control" placeholder="Ex: PROD-${Date.now()}">
          </div>

          <!-- Section Photos - Version avec inputs multiples -->
          <div class="photos-section">
            <h4>üì∏ Photos du produit</h4>
            <div class="photos-upload">
              <button type="button" class="upload-btn btn-small" onclick="addPhotoInput(${productCount})">
                üìÅ Ajouter une photo
              </button>
              <button type="button" class="upload-btn btn-small" onclick="addMultiplePhotos(${productCount})">
                üì∑ Ajouter plusieurs photos
              </button>
              <small>Utilisez "Ajouter plusieurs photos" pour s√©lectionner plusieurs images √† la fois</small>
            </div>
            
            <!-- Conteneur pour les inputs de photos -->
            <div id="photo-inputs-${productCount}" class="photo-inputs-container">
              <!-- Les inputs seront ajout√©s ici dynamiquement -->
            </div>
            
            <div class="photos-preview" id="photos-preview-${productCount}">
              <!-- Les aper√ßus de photos appara√Ætront ici -->
            </div>
          </div>

          <!-- Section Vid√©o -->
          <div class="video-section">
            <h4>üé• Vid√©o du produit (optionnel)</h4>
            <div class="video-upload">
              <button type="button" class="upload-btn" onclick="document.getElementById('video-${productCount}').click()">
                üé¨ Choisir une vid√©o
              </button>
              <input type="file" id="video-${productCount}" class="file-input" accept="video/*" 
                     onchange="handleVideo(this, ${productCount})">
              <video id="video-preview-${productCount}" class="video-preview" controls></video>
            </div>
          </div>
        </div>
      `;

      document.getElementById('products-container').insertAdjacentHTML('beforeend', productHTML);
      
      // Ajouter un input photo initial
      addPhotoInput(productCount);
    }

    function removeProduct(productId) {
      if (productCount <= 1) {
        showMessage('Au moins un produit est requis', 'warning');
        return;
      }

      document.getElementById(`product-${productId}`).remove();
      productCount--;
      updateProductCount();
    }

    function updateProductCount() {
      document.getElementById('product-count').textContent = productCount + ' produit(s)';
    }

    function calculerPrixTTC(input, productId) {
      const prix = parseFloat(input.value);
      const deviseSelect = document.querySelector(`[name="devise-${productId}"]`);
      const devise = deviseSelect ? deviseSelect.value : 'EUR';
      const prixTtcElement = document.getElementById(`prix-ttc-${productId}`);

      if (isNaN(prix) || prix <= 0) {
        prixTtcElement.textContent = '';
        return;
      }

      let tauxTVA = 0;
      let symbole = '';
      
      switch (devise) {
        case 'EUR': 
          tauxTVA = 0.20; 
          symbole = '‚Ç¨';
          break;
        case 'USD': 
          tauxTVA = 0.07; 
          symbole = '$';
          break;
        case 'XOF': 
          tauxTVA = 0.18; 
          symbole = 'CFA';
          break;
        case 'GBP': 
          tauxTVA = 0.20; 
          symbole = '¬£';
          break;
        case 'JPY': 
          tauxTVA = 0.10; 
          symbole = '¬•';
          break;
        case 'CAD': 
          tauxTVA = 0.13; 
          symbole = '$';
          break;
        case 'CHF': 
          tauxTVA = 0.08; 
          symbole = 'CHF';
          break;
        case 'CNY': 
          tauxTVA = 0.13; 
          symbole = '¬•';
          break;
        default: 
          tauxTVA = 0;
          symbole = '';
      }

      const prixTTC = prix * (1 + tauxTVA);
      prixTtcElement.textContent = `Prix TTC estim√© : ${prixTTC.toFixed(2)} ${symbole}`;
    }

    // Fonction pour ajouter un input photo simple
    function addPhotoInput(productId) {
      const container = document.getElementById(`photo-inputs-${productId}`);
      const inputCount = container.children.length;
      
      const newInput = document.createElement('input');
      newInput.type = 'file';
      newInput.name = `photos-${productCount}`; // M√™me nom pour tous les inputs
      newInput.className = 'form-control file-input-single';
      newInput.accept = 'image/*';
      newInput.style.marginBottom = '10px';
      newInput.onchange = function() { handleSinglePhoto(this, productId); };
      
      container.appendChild(newInput);
    }

    // Fonction pour ajouter un input photo multiple
    function addMultiplePhotos(productId) {
      const container = document.getElementById(`photo-inputs-${productId}`);
      
      const newInput = document.createElement('input');
      newInput.type = 'file';
      newInput.name = `photos-${productCount}`; // M√™me nom pour tous les inputs
      newInput.className = 'form-control file-input-single';
      newInput.accept = 'image/*';
      newInput.multiple = true;
      newInput.style.marginBottom = '10px';
      newInput.onchange = function() { handleMultiplePhotos(this, productId); };
      
      container.appendChild(newInput);
    }

    // Fonction pour g√©rer une photo unique
    function handleSinglePhoto(input, productId) {
      const previewContainer = document.getElementById(`photos-preview-${productId}`);
      const file = input.files[0];
      
      if (!file) return;
      
      const reader = new FileReader();
      
      reader.onload = function(e) {
        const photoItem = document.createElement('div');
        photoItem.className = 'photo-item';
        photoItem.setAttribute('data-filename', file.name);
        photoItem.innerHTML = `
          <img src="${e.target.result}" class="photo-preview" alt="Aper√ßu photo">
          <button type="button" class="photo-remove" onclick="removePhotoAndInput(this, ${productId})">√ó</button>
        `;
        previewContainer.appendChild(photoItem);
      };
      
      reader.readAsDataURL(file);
    }

    // Fonction pour g√©rer plusieurs photos
    function handleMultiplePhotos(input, productId) {
      const previewContainer = document.getElementById(`photos-preview-${productId}`);
      const files = input.files;
      
      console.log(`üì∏ Produit ${productId}: ${files.length} photos s√©lectionn√©es`);
      
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const reader = new FileReader();
        
        reader.onload = function(e) {
          const photoItem = document.createElement('div');
          photoItem.className = 'photo-item';
          photoItem.setAttribute('data-filename', file.name);
          photoItem.innerHTML = `
            <img src="${e.target.result}" class="photo-preview" alt="Aper√ßu photo ${i + 1}">
            <button type="button" class="photo-remove" onclick="removePhoto(this, ${productId})">√ó</button>
          `;
          previewContainer.appendChild(photoItem);
        };
        
        reader.readAsDataURL(file);
      }
    }

    // Fonction pour supprimer une photo et son input
    function removePhotoAndInput(button, productId) {
      const photoItem = button.parentElement;
      const filename = photoItem.getAttribute('data-filename');
      photoItem.remove();
      
      // Supprimer √©galement l'input correspondant si possible
      const inputs = document.querySelectorAll(`#photo-inputs-${productId} input`);
      inputs.forEach(input => {
        if (input.files[0] && input.files[0].name === filename) {
          input.remove();
        }
      });
    }

    // Fonction pour supprimer seulement la photo
    function removePhoto(button, productId) {
      button.parentElement.remove();
    }

    function handleVideo(input, productId) {
      const preview = document.getElementById(`video-preview-${productId}`);
      const file = input.files[0];
      
      if (file) {
        const url = URL.createObjectURL(file);
        preview.src = url;
        preview.style.display = 'block';
      } else {
        preview.style.display = 'none';
      }
    }

    function showMessage(message, type = 'info') {
      const messagesDiv = document.getElementById('messages');
      const messageHTML = `<div class="message ${type}">${message}</div>`;
      messagesDiv.innerHTML = messageHTML;
      
      setTimeout(() => {
        messagesDiv.innerHTML = '';
      }, 5000);
    }

    async function submitImport() {
      const form = document.getElementById('import-form');
      const formData = new FormData(form);
      
      // R√©cup√©rer les donn√©es des produits
      const products = [];
      const productElements = document.querySelectorAll('.produit-row');
      
      let hasError = false;

      productElements.forEach((element, index) => {
        const productNumber = index + 1;
        const nomInput = document.querySelector(`[name="nom-${productNumber}"]`);
        const prixInput = document.querySelector(`[name="prix-${productNumber}"]`);
        const deviseSelect = document.querySelector(`[name="devise-${productNumber}"]`);
        
        const productData = {
          nom: nomInput.value,
          description: document.querySelector(`[name="description-${productNumber}"]`).value,
          prix: prixInput.value,
          devise: deviseSelect.value,
          categorie: document.querySelector(`[name="categorie-${productNumber}"]`).value,
          stock: document.querySelector(`[name="stock-${productNumber}"]`).value,
          sku: document.querySelector(`[name="sku-${productNumber}"]`).value
        };
        
        // Validation
        if (!productData.nom || !productData.prix || !productData.devise) {
          showMessage(`Le produit #${productNumber} doit avoir un nom, un prix et une devise`, 'error');
          hasError = true;
          return;
        }
        
        products.push(productData);

        // Ajouter toutes les photos pour ce produit
        const photoInputs = document.querySelectorAll(`#photo-inputs-${productNumber} input`);
        photoInputs.forEach(input => {
          if (input.files) {
            for (let i = 0; i < input.files.length; i++) {
              formData.append(`photos-${productNumber}`, input.files[i]);
            }
          }
        });

        // Ajouter la vid√©o pour ce produit
        const videoFile = document.querySelector(`#video-${productNumber}`).files[0];
        if (videoFile) {
          formData.append(`video-${productNumber}`, videoFile);
        }
      });

      if (hasError) {
        return;
      }

      // Ajouter les produits au FormData
      formData.append('produits', JSON.stringify(products));

      try {
        showMessage('‚è≥ Import en cours...', 'warning');
        
        const response = await fetch('/produits/import-masse', {
          method: 'POST',
          body: formData
        });

        const result = await response.json();

        if (result.success) {
          let message = result.message;
          if (result.erreurs && result.erreurs.length > 0) {
            message += '<br>Erreurs: ' + result.erreurs.join(', ');
          }
          showMessage(message, 'success');
          
          // Redirection apr√®s succ√®s
          setTimeout(() => {
            window.location.href = '/produits/mes';
          }, 3000);
        } else {
          showMessage(result.message, 'error');
        }
      } catch (error) {
        showMessage('Erreur lors de l\'import: ' + error.message, 'error');
      }
    }
  </script>
</body>
</html>